mads 2.1.0 build 4 (27 Oct 19)
Source: foxmode_2.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.3 [2019/12/16] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 = 0080			fxptr	.ds 2
    16
    17 = 0082			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    18 = 0086			edx	.ds 4
    19 = 008A			ecx	.ds 4
    20 = 008E			bp	.ds 2
    21 = 0090			bp2	.ds 2
    22
    23 				ztmp
    24 = 0092			ztmp8	.ds 1
    25 = 0093			ztmp9	.ds 1
    26 = 0094			ztmp10	.ds 1
    27 = 0095			ztmp11	.ds 1
    28
    29 = 0096			TMP	.ds 2
    30
    31 = 0098			STACKORIGIN	.ds STACKWIDTH*4
    32
    33 				.print 'ZPFREE: $0000..',fxptr-1,' / ',*,'..',$ff
    33 				ZPFREE: $0000..$007F / $00D8..$00FF
    34
    35 				; ------------------------------------------------------------
    36
    37 = 0082			ax	= eax
    38 = 0082			al	= eax
    39 = 0083			ah	= eax+1
    40
    41 = 008A			cx	= ecx
    42 = 008A			cl	= ecx
    43 = 008B			ch	= ecx+1
    44
    45 = 0086			dx	= edx
    46 = 0086			dl	= edx
    47 = 0087			dh	= edx+1
    48
    49 					org eax
    50
    51 = 0082			FP1MAN0	.ds 1
    52 = 0083			FP1MAN1	.ds 1
    53 = 0084			FP1MAN2	.ds 1
    54 = 0085			FP1MAN3	.ds 1
    55
    56 					org ztmp8
    57
    58 = 0092			FP1SGN	.ds 1
    59 = 0093			FP1EXP	.ds 1
    60
    61 					org edx
    62
    63 = 0086			FP2MAN0	.ds 1
    64 = 0087			FP2MAN1	.ds 1
    65 = 0088			FP2MAN2	.ds 1
    66 = 0089			FP2MAN3	.ds 1
    67
    68 					org ztmp10
    69
    70 = 0094			FP2SGN	.ds 1
    71 = 0095			FP2EXP	.ds 1
    72
    73 					org ecx
    74
    75 = 008A			FPMAN0	.ds 1
    76 = 008B			FPMAN1	.ds 1
    77 = 008C			FPMAN2	.ds 1
    78 = 008D			FPMAN3	.ds 1
    79
    80 					org bp2
    81
    82 = 0090			FPSGN	.ds 1
    83 = 0091			FPEXP	.ds 1
    84
    85 				.local	RESOURCE
    86 					icl 'res6502.asm'
Source: res6502.asm
     1
  1149 					opt l+
    87 = 0000				?EXTDETECT = 0
    88 = 0000				?VBXDETECT = 0
    89
    90 2000				RCDATA 'fntdith.fnt' CHARSET_RAM_ADDRESS 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: res6502.asm]
     2 = 0400			len = .filesize('fntdith.fnt')
    28 					org main.CHARSET_RAM_ADDRESS
    30 FFFF> A000-AD5F> 11 00 + 	ins 'fntdith.fnt'
    32 					.print '$R RCDATA  ',main.CHARSET_RAM_ADDRESS,'..',*-1," 'fntdith.fnt'"
    32 				$R RCDATA  $A000..$A3FF 'fntdith.fnt'
Source: foxmode_2.a65
    91 A400				RCDATA 'fntdith.scr' VIDEO_RAM_ADDRESS 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: res6502.asm]
     2 = 0960			len = .filesize('fntdith.scr')
    28 A400				org main.VIDEO_RAM_ADDRESS
    30 A400 17 0C 1A 4B 6B 46 + 	ins 'fntdith.scr'
    32 					.print '$R RCDATA  ',main.VIDEO_RAM_ADDRESS,'..',*-1," 'fntdith.scr'"
    32 				$R RCDATA  $A400..$AD5F 'fntdith.scr'
Source: foxmode_2.a65
    92 				.endl
    93
    94 				; ------------------------------------------------------------
    95
    96 AD60				org CODEORIGIN
    97
    98 2000				STATICDATA
Macro: STATICDATA [Source: foxmode_2.a65]
Source: foxmode_2.a65
    99
   100 				; ------------------------------------------------------------
   101
   102 2000			RUNLIB
   103 2000				icl 'cpu6502.asm'
Source: cpu6502.asm
  3726 					opt l+
   104
   105 				.print 'RUNLIB: ',RUNLIB,'..',*
   105 				RUNLIB: $2000..$2017
   106
   107 				; ------------------------------------------------------------
   108
   109 2017			START
   110 2017 BA				tsx
   111 2018 8E 38 24			stx MAIN.@halt+1
   112
   113 					.ifdef fmulinit
   114 					fmulinit
   115 					eif
   116
   117 = 000D			VLEN	= VARDATASIZE-VARINITSIZE
   118 = 2477			VADR	= DATAORIGIN+VARINITSIZE
   119
   120 					ift VADR > $BFFF
   121 					ert 'Invalid memory address range ',VADR
   122 					eli (VLEN>0) && (VLEN<=256)
   123 201B A2 F3			ldx #256-VLEN
   124 201D A9 00			lda #0
   125 201F 9D 84 23 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   126 					eli VLEN>0
   127 					@fill #VADR #VLEN #0
   128 					eif
   129
   130 2025 A2 0F			ldx #$0f
   131 2027 BD 40 03 9D 3B 24 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   132
   133 2030 E8				inx		; X = 0 !!!
   134 2031 86 8E			stx bp		; lo BP = 0
   135
   136 2033				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: foxmode_2.a65]
   137
   138 2033			.local	MAIN						; PROCEDURE
   139
   140 2033 4C DC 23			jmp l_0007
   141
   142 				; ------------------------------------------------------------
   143
   144 2036			.local	SYSTEM						; UNIT
   145
   146 2036			.local	PAUSE_002D					; PROCEDURE | ASSEMBLER | OVERLOAD
   147
   148 				; ---------------------  ASM Block 039  ---------------------
   149
   150 2036 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   151
   152 203C			@exit
   153 					.ifdef @new
   154 					@FreeMem #@VarData #@VarDataSize
   155 					eif
   156 203C 60				rts						; ret
   157 				.endl
   158
   159 				; ------------------------------------------------------------
   160
   161 = 0648			M_PI_2	= $0648
   162 = 0192			D_PI_2	= $0192
   163 = 0004			D_PI_180	= $0004
   164 = 0000			MGTIA	= $0000
   165 = 0080			MVBXE	= $0080
   166 = 0000			VBXE_XDLADR	= $0000
   167 = 0100			VBXE_BCBADR	= $0100
   168 = 1000			VBXE_MAPADR	= $1000
   169 = 5000			VBXE_OVRADR	= $5000
   170 = B000			VBXE_WINDOW	= $B000
   171 = 0000			IDLI	= $0000
   172 = 0001			IVBL	= $0001
   173 = 00FE			CH_DELCHR	= $00FE
   174 = 009B			CH_ENTER	= $009B
   175 = 001B			CH_ESC	= $001B
   176 = 001C			CH_CURS_UP	= $001C
   177 = 001D			CH_CURS_DOWN	= $001D
   178 = 001E			CH_CURS_LEFT	= $001E
   179 = 001F			CH_CURS_RIGHT	= $001F
   180 = 007F			CH_TAB	= $007F
   181 = 009B			CH_EOL	= $009B
   182 = 007D			CH_CLR	= $007D
   183 = 00FD			CH_BELL	= $00FD
   184 = 007E			CH_DEL	= $007E
   185 = 009C			CH_DELLINE	= $009C
   186 = 009D			CH_INSLINE	= $009D
   187 = 0000			COLOR_BLACK	= $0000
   188 = 000E			COLOR_WHITE	= $000E
   189 = 0032			COLOR_RED	= $0032
   190 = 0096			COLOR_CYAN	= $0096
   191 = 0068			COLOR_VIOLET	= $0068
   192 = 00C4			COLOR_GREEN	= $00C4
   193 = 0074			COLOR_BLUE	= $0074
   194 = 00EE			COLOR_YELLOW	= $00EE
   195 = 0028			COLOR_ORANGE	= $0028
   196 = 00E4			COLOR_BROWN	= $00E4
   197 = 003C			COLOR_LIGHTRED	= $003C
   198 = 0004			COLOR_GRAY1	= $0004
   199 = 0006			COLOR_GRAY2	= $0006
   200 = 000A			COLOR_GRAY3	= $000A
   201 = 00CC			COLOR_LIGHTGREEN	= $00CC
   202 = 007C			COLOR_LIGHTBLUE	= $007C
   203 = 0004			FMOPENREAD	= $0004
   204 = 0008			FMOPENWRITE	= $0008
   205 = 0009			FMOPENAPPEND	= $0009
   206 = 000C			FMOPENREADWRITE	= $000C
   207 = 2453			SCREENWIDTH	= DATAORIGIN+$0000
   208 = 2455			SCREENHEIGHT	= DATAORIGIN+$0002
   209 = 2457			DATESEPARATOR	= DATAORIGIN+$0004
   210 = D014			TVSYSTEM	= $D014
   211 = 02C0			adr.PALETTE	= $02C0
   212 203D			.var PALETTE	= adr.PALETTE .word
   213 = D012			adr.HPALETTE	= $D012
   214 203D			.var HPALETTE	= adr.HPALETTE .word
   215 = 2458			FILEMODE	= DATAORIGIN+$0005
   216 = 2459			SCREENMODE	= DATAORIGIN+$0006
   217 = 245A			IORESULT	= DATAORIGIN+$0007
   218 = 245B			EOLN	= DATAORIGIN+$0008
   219 = 245C			RNDSEED	= DATAORIGIN+$0009
   220
   221 = 203D C0 02		PALETTE
   221 = 203F 12 D0		HPALETTE
   221 				.endl							; UNIT SYSTEM
   222
   223 				; ------------------------------------------------------------
   224
   225 2041			.local	ATARI						; UNIT
   226
   227 				; ------------------------------------------------------------
   228
   229 = 0012			RTCLOK	= $0012
   230 = 004D			ATRACT	= $004D
   231 = 0052			LMARGIN	= $0052
   232 = 0053			RMARGIN	= $0053
   233 = 0054			ROWCRS	= $0054
   234 = 0055			COLCRS	= $0055
   235 = 0057			DINDEX	= $0057
   236 = 0058			SAVMSC	= $0058
   237 = 006A			RAMTOP	= $006A
   238 = 0200			VDSLST	= $0200
   239 = 0230			SDLSTL	= $0230
   240 = 0290			TXTROW	= $0290
   241 = 0291			TXTCOL	= $0291
   242 = 0293			TINDEX	= $0293
   243 = 0294			TXTMSC	= $0294
   244 = 022F			SDMCTL	= $022F
   245 = 026F			GPRIOR	= $026F
   246 = 02F0			CRSINH	= $02F0
   247 = 02F3			CHACT	= $02F3
   248 = 02F4			CHBAS	= $02F4
   249 = 02FC			CH	= $02FC
   250 = 02C0			PCOLR0	= $02C0
   251 = 02C1			PCOLR1	= $02C1
   252 = 02C2			PCOLR2	= $02C2
   253 = 02C3			PCOLR3	= $02C3
   254 = 02C4			COLOR0	= $02C4
   255 = 02C5			COLOR1	= $02C5
   256 = 02C6			COLOR2	= $02C6
   257 = 02C7			COLOR3	= $02C7
   258 = 02C8			COLOR4	= $02C8
   259 = 02C8			COLBAKS	= $02C8
   260 = D000			HPOSP0	= $D000
   261 = D001			HPOSP1	= $D001
   262 = D002			HPOSP2	= $D002
   263 = D003			HPOSP3	= $D003
   264 = D004			HPOSM0	= $D004
   265 = D005			HPOSM1	= $D005
   266 = D006			HPOSM2	= $D006
   267 = D007			HPOSM3	= $D007
   268 = D008			SIZEP0	= $D008
   269 = D009			SIZEP1	= $D009
   270 = D00A			SIZEP2	= $D00A
   271 = D00B			SIZEP3	= $D00B
   272 = D00C			SIZEM	= $D00C
   273 = D00D			GRAFP0	= $D00D
   274 = D00E			GRAFP1	= $D00E
   275 = D00F			GRAFP2	= $D00F
   276 = D010			GRAFP3	= $D010
   277 = D011			GRAFM	= $D011
   278 = D004			P0PF	= $D004
   279 = D014			PAL	= $D014
   280 = D012			COLPM0	= $D012
   281 = D013			COLPM1	= $D013
   282 = D014			COLPM2	= $D014
   283 = D015			COLPM3	= $D015
   284 = D016			COLPF0	= $D016
   285 = D017			COLPF1	= $D017
   286 = D018			COLPF2	= $D018
   287 = D019			COLPF3	= $D019
   288 = D01A			COLBK	= $D01A
   289 = D01B			PRIOR	= $D01B
   290 = D01D			GRACTL	= $D01D
   291 = D01E			HITCLR	= $D01E
   292 = D200			AUDF1	= $D200
   293 = D201			AUDC1	= $D201
   294 = D202			AUDF2	= $D202
   295 = D203			AUDC2	= $D203
   296 = D204			AUDF3	= $D204
   297 = D205			AUDC3	= $D205
   298 = D206			AUDF4	= $D206
   299 = D207			AUDC4	= $D207
   300 = D208			AUDCTL	= $D208
   301 = D20F			SKSTAT	= $D20F
   302 = D301			PORTB	= $D301
   303 = D400			DMACTL	= $D400
   304 = D401			CHACTL	= $D401
   305 = D402			DLISTL	= $D402
   306 = D404			HSCROL	= $D404
   307 = D405			VSCROL	= $D405
   308 = D407			PMBASE	= $D407
   309 = D409			CHBASE	= $D409
   310 = D40A			WSYNC	= $D40A
   311 = D40B			VCOUNT	= $D40B
   312 = D40C			PENH	= $D40C
   313 = D40D			PENV	= $D40D
   314 = D40E			NMIEN	= $D40E
   315
   316 				.endl							; UNIT ATARI
   317
   318 				; ------------------------------------------------------------
   319
   320 2041			.local	CRT						; UNIT
   321
   322 2041			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   323
   324 				; ---------------------  ASM Block 051  ---------------------
   325
   326 2041 A0 00			ldy #$00	; false
   327 2043 AD FC 02			lda kbcodes
   328 2046 C9 FF			cmp #$ff
   329 2048 F0 01			beq skp
   330 204A C8				iny		; true
   331
   332 				;	sty kbcodes
   333
   334 204B 8C 5F 24		skp	sty Result
   335
   336 204E			@exit
   337
   338 				; ------------------------------------------------------------
   339
   340 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   341 				; as Pointer
   342
   343 204E E8				inx						; add bx, 1
   344 204F AD 5F 24 95 98		mva RESULT :STACKORIGIN,x
   345
   346 					.ifdef @new
   347 					@FreeMem #@VarData #@VarDataSize
   348 					eif
   349
   350 				; ------------------------------------------------------------
   351
   352 = 245F			RESULT	= DATAORIGIN+$000C
   353
   354 = 245F			@VarData	= RESULT
   355 = 0001			@VarDataSize	= 1
   356
   357 2054 60				rts						; ret
   358 				.endl
   359
   360 				; ------------------------------------------------------------
   361
   362 = 245E			TEXTATTR	= DATAORIGIN+$000B
   363 = D01F			CONSOL	= $D01F
   364 = 0000			CN_START_SELECT_OPTION	= $0000
   365 = 0001			CN_SELECT_OPTION	= $0001
   366 = 0002			CN_START_OPTION	= $0002
   367 = 0003			CN_OPTION	= $0003
   368 = 0004			CN_START_SELECT	= $0004
   369 = 0005			CN_SELECT	= $0005
   370 = 0006			CN_START	= $0006
   371 = 0007			CN_NONE	= $0007
   372 = 0000			BW40	= $0000
   373 = 0001			CO40	= $0001
   374 = 0002			BW80	= $0002
   375 = 0003			CO80	= $0003
   376 = 0007			MONO	= $0007
   377 = 0001			C40	= $0001
   378 = 0003			C80	= $0003
   379 = 0000			BLACK	= $0000
   380 = 0001			BLUE	= $0001
   381 = 0002			GREEN	= $0002
   382 = 0003			CYAN	= $0003
   383 = 0004			RED	= $0004
   384 = 0005			MAGENTA	= $0005
   385 = 0006			BROWN	= $0006
   386 = 0007			LIGHTGRAY	= $0007
   387 = 0008			DARKGRAY	= $0008
   388 = 0009			LIGHTBLUE	= $0009
   389 = 000A			LIGHTGREEN	= $000A
   390 = 000B			LIGHTCYAN	= $000B
   391 = 000C			LIGHTRED	= $000C
   392 = 000D			LIGHTMAGENTA	= $000D
   393 = 000E			YELLOW	= $000E
   394 = 000F			WHITE	= $000F
   395 = 0080			BLINK	= $0080
   396
   397 				.endl							; UNIT CRT
   398
   399 				; ------------------------------------------------------------
   400
   401 2055			.local	GR4PP						; UNIT
   402
   403 2055			.local	G4DLI						; PROCEDURE | ASSEMBLER | INTERRUPT
   404
   405 				; ---------------------  ASM Block 058  ---------------------
   406
   407
   408 2055			dli 
   409 2055 48			    pha 
   410 2056 8D 0A D4		    sta WSYNC
   411 2059 A9 04		    lda #4
   412 = 205A			.def :VS_Upper = *-1
   413 205B 8D 05 D4		    sta VSCROL
   414 205E A9 03		    lda #3
   415 = 205F			.def :VS_Lower = *-1
   416 2060 8D 05 D4		    sta VSCROL
   417 2063 68			    pla 
   418
   419 2064 40				rti						; ret
   420 				.endl
   421
   422 2065			.local	SETVS						; PROCEDURE | ASSEMBLER
   423
   424 				; ------------------------------------------------------------
   425
   426 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   427 				; as Pointer
   428 2065 B5 98 8D 63 24		mva :STACKORIGIN,x LOWER
   429 206A CA				dex						; sub bx, 1
   430
   431 				; ------------------------------------------------------------
   432
   433 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   434 				; as Pointer
   435 206B B5 98 8D 62 24		mva :STACKORIGIN,x UPPER
   436 2070 CA				dex						; sub bx, 1
   437
   438 				; ---------------------  ASM Block 059  ---------------------
   439
   440
   441 2071 AD 62 24		    lda upper
   442 2074 8D 5A 20		    sta VS_Upper
   443 2077 AD 63 24		    lda lower
   444 207A 8D 5F 20		    sta VS_Lower
   445
   446
   447 				; ------------------------------------------------------------
   448
   449 = 2462			UPPER	= DATAORIGIN+$000F
   450 = 2463			LOWER	= DATAORIGIN+$0010
   451
   452 = 2462			@VarData	= UPPER
   453 = 0002			@VarDataSize	= 2
   454
   455 207D			@exit
   456 					.ifdef @new
   457 					@FreeMem #@VarData #@VarDataSize
   458 					eif
   459 207D 60				rts						; ret
   460 				.endl
   461
   462 207E			.local	SETPIXELHEIGHT					; PROCEDURE
   463
   464 				; ------------------------------------------------------------
   465
   466 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   467 				; as Pointer
   468 207E B5 98 8D 64 24		mva :STACKORIGIN,x LINES
   469 2083 CA				dex						; sub bx, 1
   470
   471 				; optimize OK (GR4PP), line = 79
   472
   473 2084 A0 01			ldy #1
   474 2086 AD 64 24			lda LINES
   475 2089 C9 01			cmp #$01
   476 208B F0 02			seq
   477 208D B0 01			bcs @+
   478 208F 88				dey
   479 2090			@
   480 2090 84 A1			sty :STACKORIGIN+9
   481 2092 A0 01			ldy #1
   482 2094 AD 64 24			lda LINES
   483 2097 C9 07			cmp #$07
   484 2099 90 01			bcc @+
   485 209B 88				dey
   486 209C			@
   487 209C 98				tya
   488 209D 25 A1			and :STACKORIGIN+9
   489 209F F0 16			jeq l_005E
   490
   491 				; optimize FAIL ('SYSTEM.PAUSE_002D', GR4PP), line = 80
   492 20A1 20 36 20			jsr SYSTEM.PAUSE_002D
   493
   494 				; optimize FAIL ('SETVS', GR4PP), line = 81
   495 20A4 E8				inx
   496 20A5 A9 08			lda #$08
   497 20A7 38 ED 64 24			sub LINES
   498 20AB 95 98			sta :STACKORIGIN,x
   499 20AD E8				inx
   500 20AE AC 64 24			ldy LINES
   501 20B1 88				dey
   502 20B2 94 98			sty :STACKORIGIN,x
   503 20B4 20 65 20			jsr SETVS
   504 20B7			l_005E
   505
   506 				; ------------------------------------------------------------
   507
   508 = 2464			LINES	= DATAORIGIN+$0011
   509
   510 = 2464			@VarData	= LINES
   511 = 0001			@VarDataSize	= 1
   512
   513 20B7			@exit
   514 					.ifdef @new
   515 					@FreeMem #@VarData #@VarDataSize
   516 					eif
   517 20B7 60				rts						; ret
   518 				.endl
   519
   520 20B8			.local	DLPOKE						; PROCEDURE
   521
   522 				; ------------------------------------------------------------
   523
   524 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   525 				; as Pointer
   526 20B8 B5 98 8D 65 24		mva :STACKORIGIN,x B
   527 20BD CA				dex						; sub bx, 1
   528
   529 				; optimize OK (GR4PP), line = 87
   530
   531 20BE AC 60 24			ldy DLIST
   532 20C1 AD 61 24			lda DLIST+1
   533 20C4 85 8F			sta :bp+1
   534 20C6 AD 65 24			lda B
   535 20C9 91 8E			sta (:bp),y
   536
   537 				; optimize FAIL (0, GR4PP), line = 88
   538 20CB EE 60 24 D0 03 EE + 	inw DLIST
   539
   540 				; ------------------------------------------------------------
   541
   542 = 2465			B	= DATAORIGIN+$0012
   543
   544 = 2465			@VarData	= B
   545 = 0001			@VarDataSize	= 1
   546
   547 20D3			@exit
   548 					.ifdef @new
   549 					@FreeMem #@VarData #@VarDataSize
   550 					eif
   551 20D3 60				rts						; ret
   552 				.endl
   553
   554 20D4			.local	DLPOKEW						; PROCEDURE
   555
   556 				; ------------------------------------------------------------
   557
   558 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   559 				; as Pointer
   560 20D4 B5 98 8D 66 24		mva :STACKORIGIN,x W
   561 20D9 B5 A8 8D 67 24		mva :STACKORIGIN+STACKWIDTH,x W+1
   562 20DE CA				dex						; sub bx, 1
   563
   564 				; optimize OK (GR4PP), line = 93
   565
   566 20DF AC 60 24			ldy DLIST
   567 20E2 AD 61 24			lda DLIST+1
   568 20E5 85 8F			sta :bp+1
   569 20E7 AD 66 24			lda W
   570 20EA 91 8E			sta (:bp),y
   571
   572 				; optimize OK (GR4PP), line = 94
   573
   574 20EC AD 67 24			lda W+1
   575 20EF AC 60 24 84 90 AC + 	mwy DLIST :bp2
   576 20F9 A0 01			ldy #$01
   577 20FB 91 90			sta (:bp2),y
   578
   579 				; optimize OK (GR4PP), line = 95
   580
   581 20FD AD 60 24			lda DLIST
   582 2100 18 69 02			add #$02
   583 2103 8D 60 24			sta DLIST
   584 2106 90 03			scc
   585 2108 EE 61 24			inc DLIST+1
   586
   587 				; ------------------------------------------------------------
   588
   589 = 2466			W	= DATAORIGIN+$0013
   590
   591 = 2466			@VarData	= W
   592 = 0002			@VarDataSize	= 2
   593
   594 210B			@exit
   595 					.ifdef @new
   596 					@FreeMem #@VarData #@VarDataSize
   597 					eif
   598 210B 60				rts						; ret
   599 				.endl
   600
   601 210C			.local	BUILDDISPLAYLIST				; PROCEDURE
   602
   603 				; ------------------------------------------------------------
   604
   605 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   606 				; as Pointer
   607 210C B5 98 8D 6D 24		mva :STACKORIGIN,x BLANKS
   608 2111 CA				dex						; sub bx, 1
   609
   610 				; ------------------------------------------------------------
   611
   612 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   613 				; as Pointer
   614 2112 B5 98 8D 6C 24		mva :STACKORIGIN,x LINES
   615 2117 CA				dex						; sub bx, 1
   616
   617 				; ------------------------------------------------------------
   618
   619 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   620 				; as Pointer
   621 2118 B5 98 8D 6A 24		mva :STACKORIGIN,x VRAMADDRESS
   622 211D B5 A8 8D 6B 24		mva :STACKORIGIN+STACKWIDTH,x VRAMADDRESS+1
   623 2122 CA				dex						; sub bx, 1
   624
   625 				; ------------------------------------------------------------
   626
   627 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   628 				; as Pointer
   629 2123 B5 98 8D 68 24		mva :STACKORIGIN,x DLISTADDRESS
   630 2128 B5 A8 8D 69 24		mva :STACKORIGIN+STACKWIDTH,x DLISTADDRESS+1
   631 212D CA				dex						; sub bx, 1
   632
   633 				; optimize OK (GR4PP), line = 100
   634
   635 212E AD 68 24 8D 60 24		mva DLISTADDRESS DLIST
   636 2134 AD 69 24 8D 61 24		mva DLISTADDRESS+1 DLIST+1
   637
   638 				; --- WhileProlog
   639 213A			l_00AD
   640
   641 				; optimize OK (GR4PP), line = 101
   642
   643 213A AD 6D 24			lda BLANKS
   644 213D C9 00			cmp #$00
   645 213F F0 02			seq
   646 2141 B0 03			bcs @+
   647 2143 4C 54 21			jmp l_00BC
   648 2146			@
   649
   650 				; optimize FAIL ('DLPOKE', GR4PP), line = 102
   651 2146 E8				inx
   652 2147 A9 70 95 98			mva #$70 :STACKORIGIN,x
   653 214B 20 B8 20			jsr DLPOKE
   654
   655 				; optimize FAIL (0, GR4PP), line = 103
   656 214E CE 6D 24			dec BLANKS
   657 2151 4C 3A 21			jmp l_00AD
   658 2154			l_00BC
   659
   660 				; optimize FAIL ('DLPOKE', GR4PP), line = 105
   661 2154 E8				inx
   662 2155 A9 E4 95 98			mva #$E4 :STACKORIGIN,x
   663 2159 20 B8 20			jsr DLPOKE
   664
   665 				; optimize FAIL ('DLPOKEW', GR4PP), line = 106
   666 215C E8				inx
   667 215D AD 6A 24 95 98		mva VRAMADDRESS :STACKORIGIN,x
   668 2162 AD 6B 24 95 A8		mva VRAMADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   669 2167 20 D4 20			jsr DLPOKEW
   670
   671 				; optimize OK (GR4PP), line = 108
   672
   673 216A AD 6C 24			lda LINES
   674 216D 4A				lsr @
   675 216E 38 E9 01			sub #$01
   676 2171 8D 6C 24			sta LINES
   677
   678 				; --- WhileProlog
   679 2174			l_00D7
   680
   681 				; optimize OK (GR4PP), line = 109
   682
   683 2174 AD 6C 24			lda LINES
   684 2177 C9 00			cmp #$00
   685 2179 F0 02			seq
   686 217B B0 03			bcs @+
   687 217D 4C 92 21			jmp l_00E6
   688 2180			@
   689
   690 				; optimize FAIL ('DLPOKEW', GR4PP), line = 110
   691 2180 E8				inx
   692 2181 A9 84 95 98			mva #$84 :STACKORIGIN,x
   693 2185 A9 24 95 A8			mva #$24 :STACKORIGIN+STACKWIDTH,x
   694 2189 20 D4 20			jsr DLPOKEW
   695
   696 				; optimize FAIL (0, GR4PP), line = 111
   697 218C CE 6C 24			dec LINES
   698 218F 4C 74 21			jmp l_00D7
   699 2192			l_00E6
   700
   701 				; optimize FAIL ('DLPOKE', GR4PP), line = 113
   702 2192 E8				inx
   703 2193 A9 04 95 98			mva #$04 :STACKORIGIN,x
   704 2197 20 B8 20			jsr DLPOKE
   705
   706 				; optimize FAIL ('DLPOKE', GR4PP), line = 114
   707 219A E8				inx
   708 219B A9 41 95 98			mva #$41 :STACKORIGIN,x
   709 219F 20 B8 20			jsr DLPOKE
   710
   711 				; optimize FAIL ('DLPOKEW', GR4PP), line = 115
   712 21A2 E8				inx
   713 21A3 AD 68 24 95 98		mva DLISTADDRESS :STACKORIGIN,x
   714 21A8 AD 69 24 95 A8		mva DLISTADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   715 21AD 20 D4 20			jsr DLPOKEW
   716
   717 				; ------------------------------------------------------------
   718
   719 = 2468			DLISTADDRESS	= DATAORIGIN+$0015
   720 = 246A			VRAMADDRESS	= DATAORIGIN+$0017
   721 = 246C			LINES	= DATAORIGIN+$0019
   722 = 246D			BLANKS	= DATAORIGIN+$001A
   723
   724 = 2468			@VarData	= DLISTADDRESS
   725 = 0006			@VarDataSize	= 6
   726
   727 21B0			@exit
   728 					.ifdef @new
   729 					@FreeMem #@VarData #@VarDataSize
   730 					eif
   731 21B0 60				rts						; ret
   732 				.endl
   733
   734 21B1			.local	GR4INIT						; PROCEDURE
   735
   736 				; ------------------------------------------------------------
   737
   738 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   739 				; as Pointer
   740 21B1 B5 98 8D 74 24		mva :STACKORIGIN,x BLANKS
   741 21B6 CA				dex						; sub bx, 1
   742
   743 				; ------------------------------------------------------------
   744
   745 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   746 				; as Pointer
   747 21B7 B5 98 8D 73 24		mva :STACKORIGIN,x PIXELHEIGHT
   748 21BC CA				dex						; sub bx, 1
   749
   750 				; ------------------------------------------------------------
   751
   752 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   753 				; as Pointer
   754 21BD B5 98 8D 72 24		mva :STACKORIGIN,x LINES
   755 21C2 CA				dex						; sub bx, 1
   756
   757 				; ------------------------------------------------------------
   758
   759 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   760 				; as Pointer
   761 21C3 B5 98 8D 70 24		mva :STACKORIGIN,x VRAMADDRESS
   762 21C8 B5 A8 8D 71 24		mva :STACKORIGIN+STACKWIDTH,x VRAMADDRESS+1
   763 21CD CA				dex						; sub bx, 1
   764
   765 				; ------------------------------------------------------------
   766
   767 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   768 				; as Pointer
   769 21CE B5 98 8D 6E 24		mva :STACKORIGIN,x DLISTADDRESS
   770 21D3 B5 A8 8D 6F 24		mva :STACKORIGIN+STACKWIDTH,x DLISTADDRESS+1
   771 21D8 CA				dex						; sub bx, 1
   772
   773 				; optimize FAIL ('BUILDDISPLAYLIST', GR4PP), line = 120
   774 21D9 E8				inx
   775 21DA AD 6E 24 95 98		mva DLISTADDRESS :STACKORIGIN,x
   776 21DF AD 6F 24 95 A8		mva DLISTADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   777 21E4 E8				inx
   778 21E5 AD 70 24 95 98		mva VRAMADDRESS :STACKORIGIN,x
   779 21EA AD 71 24 95 A8		mva VRAMADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   780 21EF E8				inx
   781 21F0 AD 72 24 95 98		mva LINES :STACKORIGIN,x
   782 21F5 E8				inx
   783 21F6 AD 74 24 95 98		mva BLANKS :STACKORIGIN,x
   784 21FB 20 0C 21			jsr BUILDDISPLAYLIST
   785
   786 				; optimize FAIL ('SETPIXELHEIGHT', GR4PP), line = 121
   787 21FE E8				inx
   788 21FF AD 73 24 95 98		mva PIXELHEIGHT :STACKORIGIN,x
   789 2204 20 7E 20			jsr SETPIXELHEIGHT
   790
   791 				; optimize OK (GR4PP), line = 122
   792
   793 2207 AD 6E 24 8D 30 02		mva DLISTADDRESS ATARI.SDLSTL
   794 220D AD 6F 24 8D 31 02		mva DLISTADDRESS+1 ATARI.SDLSTL+1
   795
   796 				; optimize OK (GR4PP), line = 123
   797
   798 2213 AD 70 24 85 58		mva VRAMADDRESS ATARI.SAVMSC
   799 2218 AD 71 24 85 59		mva VRAMADDRESS+1 ATARI.SAVMSC+1
   800
   801 				; optimize OK (GR4PP), line = 124
   802
   803 221D A9 55 8D 00 02		mva <G4DLI VDSLST
   804 2222 A9 20 8D 01 02		mva >G4DLI VDSLST+1
   805
   806 				; optimize OK (GR4PP), line = 125
   807
   808 2227 A9 C0 8D 0E D4		mva #$C0 ATARI.NMIEN
   809
   810 				; ------------------------------------------------------------
   811
   812 = 246E			DLISTADDRESS	= DATAORIGIN+$001B
   813 = 2470			VRAMADDRESS	= DATAORIGIN+$001D
   814 = 2472			LINES	= DATAORIGIN+$001F
   815 = 2473			PIXELHEIGHT	= DATAORIGIN+$0020
   816 = 2474			BLANKS	= DATAORIGIN+$0021
   817
   818 = 246E			@VarData	= DLISTADDRESS
   819 = 0007			@VarDataSize	= 7
   820
   821 222C			@exit
   822 					.ifdef @new
   823 					@FreeMem #@VarData #@VarDataSize
   824 					eif
   825 222C 60				rts						; ret
   826 				.endl
   827
   828 				; ------------------------------------------------------------
   829
   830 = 0070			DL_BLANK8	= $0070
   831 = 0080			DL_DLI	= $0080
   832 = 0040			DL_LMS	= $0040
   833 = 0020			DL_VSCROLL	= $0020
   834 = 000F			DL_MODE_320X192G2	= $000F
   835 = 0041			DL_JVB	= $0041
   836 = 2460			DLIST	= DATAORIGIN+$000D
   837
   838 				.endl							; UNIT GR4PP
   839
   840 222D			.local	VBL						; PROCEDURE | ASSEMBLER | INTERRUPT
   841
   842 				; ---------------------  ASM Block 060  ---------------------
   843
   844
   845 222D AD 5A 20			lda VS_Upper
   846 2230 8D 05 D4			sta vscrol
   847
   848 2233 A9 A0 8D 09 D4		mva >CHARSET_RAM_ADDRESS	chbase
   849 					
   850 2238 4C 62 E4			jmp xitvbv
   851
   852 223B 40				rti						; ret
   853 				.endl
   854
   855 223C			.local	INITSINE					; PROCEDURE | ASSEMBLER
   856
   857 				; ---------------------  ASM Block 061  ---------------------
   858
   859
   860 223C 8A 48			txa:pha
   861
   862 223E A0 3F			ldy #$3f
   863 2240 A2 00			ldx #$00
   864
   865 				; Accumulate the delta (normal 16-bit addition)
   866 2242			loop
   867 2242 A9 00			lda #0
   868 = 2243			lvalue	equ *-1
   869 2244 18				clc
   870 2245 69 00			adc #0
   871 = 2246			ldelta	equ *-1
   872 2247 8D 43 22			sta lvalue
   873 224A A9 00			lda #0
   874 = 224B			hvalue	equ *-1
   875 224C 69 00			adc #0
   876 = 224D			hdelta	equ *-1
   877 224E 8D 4B 22			sta hvalue
   878
   879 				; Reflect the value around for a sine wave
   880 2251 9D C0 BF			sta adr.sinustable+$c0,x
   881 2254 99 80 BF			sta adr.sinustable+$80,y
   882 2257 49 FF			eor #$ff
   883 2259 9D 40 BF			sta adr.sinustable+$40,x
   884 225C 99 00 BF			sta adr.sinustable+$00,y
   885
   886 				; Increase the delta, which creates the "acceleration" for a parabola
   887 225F AD 46 22			lda ldelta
   888 2262 69 10			adc #$10   ; this value adds up to the proper amplitude
   889 2264 8D 46 22			sta ldelta
   890 2267 90 03			scc
   891 2269 EE 4D 22			inc hdelta
   892
   893 				; Loop
   894 226C E8				inx
   895 226D 88				dey
   896 226E 10 D2			bpl loop
   897
   898 2270 68 AA			pla:tax
   899
   900 2272			@exit
   901 					.ifdef @new
   902 					@FreeMem #@VarData #@VarDataSize
   903 					eif
   904 2272 60				rts						; ret
   905 				.endl
   906
   907 2273			.local	INITMULDIV					; PROCEDURE
   908
   909 				; optimize OK (foxmode_2.pas), line = 87
   910
   911 2273 A9 00 8D 78 24		mva #$00 S
   912 2278 8D 79 24			sta S+1
   913 				; --- For
   914
   915 				; optimize OK (foxmode_2.pas), line = 89
   916
   917 227B 8D 77 24			sta X
   918
   919 				; optimize OK (foxmode_2.pas), line = 89
   920
   921 				; --- To
   922 227E			l_0137
   923
   924 				; --- ForToDoCondition
   925
   926 				; optimize OK (foxmode_2.pas), line = 89
   927
   928 227E AD 77 24			lda X
   929 2281 C9 7F			cmp #$7F
   930 2283 90 02			scc
   931 2285 D0 2C			jne l_0145
   932
   933 				; optimize OK (foxmode_2.pas), line = 90
   934
   935 2287 AD 79 24			lda S+1
   936 228A AC 77 24			ldy X
   937 228D 99 00 BD			sta adr.LOOKUPDIV,y
   938
   939 				; optimize OK (foxmode_2.pas), line = 91
   940
   941 2290 A9 FF			lda #$FF
   942 2292 38 ED 77 24			sub X
   943 2296 85 A1			sta :STACKORIGIN+9
   944 2298 B9 00 BD			lda adr.LOOKUPDIV,y
   945 229B A4 A1			ldy :STACKORIGIN+9
   946 229D 99 00 BD			sta adr.LOOKUPDIV,y
   947
   948 				; optimize OK (foxmode_2.pas), line = 93
   949
   950 22A0 AD 78 24			lda S
   951 22A3 18 69 16			add #$16
   952 22A6 8D 78 24			sta S
   953 22A9 90 03			scc
   954 22AB EE 79 24			inc S+1
   955
   956 				; --- ForToDoEpilog
   957 22AE EE 77 24			inc X						; inc ptr byte [CounterAddress]
   958
   959 22B1 D0 CB			jne l_0137
   960
   961 22B3			l_0145
   962 				; --- For
   963
   964 				; optimize OK (foxmode_2.pas), line = 96
   965
   966 22B3 A9 00 8D 77 24		mva #$00 X
   967
   968 				; optimize OK (foxmode_2.pas), line = 96
   969
   970 				; --- To
   971 22B8			l_0174
   972
   973 				; --- ForToDoCondition
   974
   975 				; optimize OK (foxmode_2.pas), line = 96
   976
   977 22B8 AD 77 24			lda X
   978 22BB C9 FF			cmp #$FF
   979 22BD 90 02			scc
   980 22BF D0 1C			jne l_0182
   981
   982 				; optimize OK (foxmode_2.pas), line = 96
   983
   984 22C1 AC 77 24			ldy X
   985 22C4 B9 00 BD			lda adr.LOOKUPDIV,y
   986 22C7 85 82			sta :eax
   987 22C9 A9 0B			lda #$0B
   988 22CB 85 8A			sta :ecx
   989 					.ifdef fmulinit
   990 					fmulu_8
   991 					els
   992 22CD 20 00 20			imulCL
   993 					eif
   994 22D0 A5 82			lda :eax
   995 22D2 AC 77 24			ldy X
   996 22D5 99 00 BE			sta adr.LOOKUPMUL,y
   997
   998 				; --- ForToDoEpilog
   999 22D8 EE 77 24			inc X						; inc ptr byte [CounterAddress]
  1000
  1001 22DB D0 DB			jne l_0174
  1002
  1003 22DD			l_0182
  1004
  1005 				; ------------------------------------------------------------
  1006
  1007 = 2477			X	= DATAORIGIN+$0024
  1008 = 2478			S	= DATAORIGIN+$0025
  1009 = 007F			@FORTMP_0134	= $007F
  1010 = 00FF			@FORTMP_0171	= $00FF
  1011
  1012 = 2477			@VarData	= X
  1013 = 0003			@VarDataSize	= 3
  1014
  1015 22DD			@exit
  1016 					.ifdef @new
  1017 					@FreeMem #@VarData #@VarDataSize
  1018 					eif
  1019 22DD 60				rts						; ret
  1020 				.endl
  1021
  1022 22DE			.local	DOPLASMA					; PROCEDURE
  1023
  1024 				; optimize OK (foxmode_2.pas), line = 106
  1025
  1026 22DE A9 8A 8D 82 24		mva #$8A SCRN
  1027 22E3 A9 A6 8D 83 24		mva #$A6 SCRN+1
  1028
  1029 				; optimize OK (foxmode_2.pas), line = 108
  1030
  1031 22E8 AD 75 24 8D 7A 24		mva C1A _C1A
  1032
  1033 				; optimize OK (foxmode_2.pas), line = 109
  1034
  1035 22EE AD 76 24 8D 7B 24		mva C1B _C1B
  1036 				; --- For
  1037
  1038 				; optimize OK (foxmode_2.pas), line = 111
  1039
  1040 22F4 A9 00 8D 7C 24		mva #$00 I
  1041
  1042 				; optimize OK (foxmode_2.pas), line = 111
  1043
  1044 				; --- To
  1045 22F9			l_01B4
  1046
  1047 				; --- ForToDoCondition
  1048
  1049 				; optimize OK (foxmode_2.pas), line = 111
  1050
  1051 22F9 AD 7C 24			lda I
  1052 22FC C9 4F			cmp #$4F
  1053 22FE 90 02			scc
  1054 2300 D0 2A			jne l_01C2
  1055
  1056 				; optimize OK (foxmode_2.pas), line = 112
  1057
  1058 2302 AC 7A 24			ldy _C1A
  1059 2305 B9 00 BF			lda adr.SINUSTABLE,y
  1060 2308 AC 7B 24			ldy _C1B
  1061 230B 18 79 00 BF			add adr.SINUSTABLE,y
  1062 230F AC 7C 24			ldy I
  1063 2312 99 00 06			sta adr.XBUF,y
  1064
  1065 				; optimize OK (foxmode_2.pas), line = 113
  1066
  1067 2315 AD 7A 24			lda _C1A
  1068 2318 18 69 03			add #$03
  1069 231B 8D 7A 24			sta _C1A
  1070
  1071 				; optimize OK (foxmode_2.pas), line = 114
  1072
  1073 231E AD 7B 24			lda _C1B
  1074 2321 18 69 07			add #$07
  1075 2324 8D 7B 24			sta _C1B
  1076
  1077 				; --- ForToDoEpilog
  1078 2327 EE 7C 24			inc I						; inc ptr byte [CounterAddress]
  1079
  1080 232A D0 CD			jne l_01B4
  1081
  1082 232C			l_01C2
  1083 				; --- For
  1084
  1085 				; optimize OK (foxmode_2.pas), line = 117
  1086
  1087 232C A9 00 8D 7D 24		mva #$00 II
  1088
  1089 				; optimize OK (foxmode_2.pas), line = 117
  1090
  1091 				; --- To
  1092 2331			l_01E7
  1093
  1094 				; --- ForToDoCondition
  1095
  1096 				; optimize OK (foxmode_2.pas), line = 117
  1097
  1098 2331 AD 7D 24			lda II
  1099 2334 C9 1D			cmp #$1D
  1100 2336 90 05			scc
  1101 2338 F0 03 4C C9 23		jne l_01F5
  1102
  1103 				; optimize OK (foxmode_2.pas), line = 119
  1104
  1105 233D AC 7A 24			ldy _C1A
  1106 2340 B9 00 BF			lda adr.SINUSTABLE,y
  1107 2343 AC 7B 24			ldy _C1B
  1108 2346 18 79 00 BF			add adr.SINUSTABLE,y
  1109 234A 8D 7E 24			sta TMP
  1110
  1111 				; optimize OK (foxmode_2.pas), line = 121
  1112
  1113 234D AD 7A 24			lda _C1A
  1114 2350 18 69 04			add #$04
  1115 2353 8D 7A 24			sta _C1A
  1116
  1117 				; optimize OK (foxmode_2.pas), line = 122
  1118
  1119 2356 AD 7B 24			lda _C1B
  1120 2359 18 69 09			add #$09
  1121 235C 8D 7B 24			sta _C1B
  1122
  1123 				; optimize OK (foxmode_2.pas), line = 124
  1124
  1125 235F A9 00 8D 81 24		mva #$00 K
  1126 				; --- For
  1127
  1128 				; optimize OK (foxmode_2.pas), line = 125
  1129
  1130 2364 8D 7C 24			sta I
  1131
  1132 				; optimize OK (foxmode_2.pas), line = 125
  1133
  1134 				; --- To
  1135 2367			l_0216
  1136
  1137 				; --- ForToDoCondition
  1138
  1139 				; optimize OK (foxmode_2.pas), line = 125
  1140
  1141 2367 AD 7C 24			lda I
  1142 236A C9 13			cmp #$13
  1143 236C 90 02			scc
  1144 236E D0 43			jne l_0224
  1145
  1146 				; optimize OK (foxmode_2.pas), line = 126
  1147
  1148 2370 AC 81 24			ldy K
  1149 2373 B9 00 06			lda adr.XBUF,y
  1150 2376 18 6D 7E 24			add TMP
  1151 237A A8				tay
  1152 237B B9 00 BE			lda adr.LOOKUPMUL,y
  1153 237E 8D 7F 24			sta A
  1154
  1155 				; optimize FAIL (0, foxmode_2.pas), line = 126
  1156 2381 EE 81 24			inc K
  1157
  1158 				; optimize OK (foxmode_2.pas), line = 127
  1159
  1160 2384 AC 81 24			ldy K
  1161 2387 B9 00 06			lda adr.XBUF,y
  1162 238A 18 6D 7E 24			add TMP
  1163 238E A8				tay
  1164 238F B9 00 BD			lda adr.LOOKUPDIV,y
  1165 2392 8D 80 24			sta B
  1166
  1167 				; optimize FAIL (0, foxmode_2.pas), line = 127
  1168 2395 EE 81 24			inc K
  1169
  1170 				; optimize OK (foxmode_2.pas), line = 129
  1171
  1172 2398 AD 7F 24			lda A
  1173 239B 18 6D 80 24			add B
  1174 239F AC 82 24 84 90 AC + 	mwy SCRN :bp2
  1175 23A9 AC 7C 24			ldy I
  1176 23AC 91 90			sta (:bp2),y
  1177
  1178 				; --- ForToDoEpilog
  1179 23AE EE 7C 24			inc I						; inc ptr byte [CounterAddress]
  1180
  1181 23B1 D0 B4			jne l_0216
  1182
  1183 23B3			l_0224
  1184
  1185 				; optimize OK (foxmode_2.pas), line = 132
  1186
  1187 23B3 AD 82 24			lda SCRN
  1188 23B6 18 69 28			add #$28
  1189 23B9 8D 82 24			sta SCRN
  1190 23BC 90 03			scc
  1191 23BE EE 83 24			inc SCRN+1
  1192
  1193 				; --- ForToDoEpilog
  1194 23C1 EE 7D 24			inc II						; inc ptr byte [CounterAddress]
  1195
  1196 23C4 F0 03 4C 31 23		jne l_01E7
  1197
  1198 23C9			l_01F5
  1199
  1200 				; optimize OK (foxmode_2.pas), line = 135
  1201
  1202 23C9 AD 75 24			lda C1A
  1203 23CC 18 69 03			add #$03
  1204 23CF 8D 75 24			sta C1A
  1205
  1206 				; optimize OK (foxmode_2.pas), line = 136
  1207
  1208 23D2 AD 76 24			lda C1B
  1209 23D5 38 E9 05			sub #$05
  1210 23D8 8D 76 24			sta C1B
  1211
  1212 				; ------------------------------------------------------------
  1213
  1214 = 247A			_C1A	= DATAORIGIN+$0027
  1215 = 247B			_C1B	= DATAORIGIN+$0028
  1216 = 247C			I	= DATAORIGIN+$0029
  1217 = 247D			II	= DATAORIGIN+$002A
  1218 = 247E			TMP	= DATAORIGIN+$002B
  1219 = 247F			A	= DATAORIGIN+$002C
  1220 = 2480			B	= DATAORIGIN+$002D
  1221 = 2481			K	= DATAORIGIN+$002E
  1222 = 2482			SCRN	= DATAORIGIN+$002F
  1223 = 004F			@FORTMP_01B1	= $004F
  1224 = 001D			@FORTMP_01E4	= $001D
  1225 = 0013			@FORTMP_0213	= $0013
  1226
  1227 = 247A			@VarData	= _C1A
  1228 = 000A			@VarDataSize	= 10
  1229
  1230 23DB			@exit
  1231 					.ifdef @new
  1232 					@FreeMem #@VarData #@VarDataSize
  1233 					eif
  1234 23DB 60				rts						; ret
  1235 				.endl
  1236 23DC			l_0007
  1237
  1238 				; optimize FAIL ('INITSINE', foxmode_2.pas), line = 143
  1239 23DC 20 3C 22			jsr INITSINE
  1240
  1241 				; optimize FAIL ('INITMULDIV', foxmode_2.pas), line = 144
  1242 23DF 20 73 22			jsr INITMULDIV
  1243
  1244 				; optimize FAIL ('GR4PP.GR4INIT', foxmode_2.pas), line = 146
  1245 23E2 E8				inx
  1246 23E3 A9 00 95 98			mva #$00 :STACKORIGIN,x
  1247 23E7 A9 9F 95 A8			mva #$9F :STACKORIGIN+STACKWIDTH,x
  1248 23EB E8				inx
  1249 23EC A9 00 95 98			mva #$00 :STACKORIGIN,x
  1250 23F0 A9 A4 95 A8			mva #$A4 :STACKORIGIN+STACKWIDTH,x
  1251 23F4 E8				inx
  1252 23F5 A9 3C 95 98			mva #$3C :STACKORIGIN,x
  1253 23F9 E8				inx
  1254 23FA A9 04 95 98			mva #$04 :STACKORIGIN,x
  1255 23FE E8				inx
  1256 23FF A9 00 95 98			mva #$00 :STACKORIGIN,x
  1257 2403 20 B1 21			jsr GR4PP.GR4INIT
  1258
  1259 				; optimize OK (foxmode_2.pas), line = 148
  1260
  1261 2406 A9 2D			lda <VBL
  1262 2408 A0 05			ldy #5
  1263 240A 8D 0A D4			sta wsync
  1264 240D 88				dey
  1265 240E D0 FD			rne
  1266 2410 8D 24 02			sta VVBLKD
  1267 2413 A9 22			lda >VBL
  1268 2415 8D 25 02			sta VVBLKD+1
  1269
  1270 				; optimize OK (foxmode_2.pas), line = 150
  1271
  1272 2418 A9 00 8D 1A D0		mva #$00 ATARI.COLBK
  1273
  1274 				; optimize OK (foxmode_2.pas), line = 152
  1275
  1276 241D A9 22 8D C4 02		mva #$22 ATARI.COLOR0
  1277
  1278 				; optimize OK (foxmode_2.pas), line = 153
  1279
  1280 2422 A9 36 8D C5 02		mva #$36 ATARI.COLOR1
  1281
  1282 				; optimize OK (foxmode_2.pas), line = 154
  1283
  1284 2427 A9 96 8D C6 02		mva #$96 ATARI.COLOR2
  1285
  1286 				; --- RepeatUntilProlog
  1287 242C			l_0286
  1288
  1289 				; optimize FAIL ('DOPLASMA', foxmode_2.pas), line = 158
  1290 242C 20 DE 22			jsr DOPLASMA
  1291
  1292 				; optimize FAIL ('CRT.KEYPRESSED', foxmode_2.pas), line = 160
  1293 242F 20 41 20			jsr CRT.KEYPRESSED
  1294 2432 CA				dex
  1295 2433 B5 99			lda :STACKORIGIN+1,x
  1296 2435 F0 F5			jeq l_0286
  1297
  1298 				; ------------------------------------------------------------
  1299
  1300 = 9F00			DISPLAY_LIST_ADDRESS	= $9F00
  1301 = A000			CHARSET_RAM_ADDRESS	= $A000
  1302 = A400			VIDEO_RAM_ADDRESS	= $A400
  1303 = BD00			adr.LOOKUPDIV	= $BD00
  1304 2437			.var LOOKUPDIV	= adr.LOOKUPDIV .word
  1305 = BE00			adr.LOOKUPMUL	= $BE00
  1306 2437			.var LOOKUPMUL	= adr.LOOKUPMUL .word
  1307 = BF00			adr.SINUSTABLE	= $BF00
  1308 2437			.var SINUSTABLE	= adr.SINUSTABLE .word
  1309 = 0600			adr.XBUF	= $0600
  1310 2437			.var XBUF	= adr.XBUF .word
  1311 = 2475			C1A	= DATAORIGIN+$0022
  1312 = 2476			C1B	= DATAORIGIN+$0023
  1313 2437			@exit
  1314
  1315 2437 A2 00		@halt	ldx #0
  1316 2439 9A				txs
  1317
  1318 243A 60				rts
  1319
  1320 				; ------------------------------------------------------------
  1321
  1322 243B 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1323
  1324 				; ------------------------------------------------------------
  1325
  1326 244B			.local	@DEFINES
  1327 244B			ATARI
  1328 				.endl
  1329
  1330 = 244B 00 BD		LOOKUPDIV
  1330 = 244D 00 BE		LOOKUPMUL
  1330 = 244F 00 BF		SINUSTABLE
  1330 = 2451 00 06		XBUF
  1330 				.endl							; MAIN
  1331
  1332 				; ------------------------------------------------------------
  1333 				; ------------------------------------------------------------
  1334
  1335 				.macro	UNITINITIALIZATION
  1336 				
  1337 					.ifdef MAIN.SYSTEM.@UnitInit
  1338 					jsr MAIN.SYSTEM.@UnitInit
  1339 					eif
  1340 				
  1341 					.ifdef MAIN.ATARI.@UnitInit
  1342 					jsr MAIN.ATARI.@UnitInit
  1343 					eif
  1344 				
  1345 					.ifdef MAIN.CRT.@UnitInit
  1346 					jsr MAIN.CRT.@UnitInit
  1347 					eif
  1348 				
  1349 					.ifdef MAIN.GR4PP.@UnitInit
  1350 					jsr MAIN.GR4PP.@UnitInit
  1351 					eif
  1352 				.endm
  1353
  1354 				; ------------------------------------------------------------
  1355
  1356 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1357 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1357 				SYSTEM: $2036..$2040
  1358 					eif
  1359
  1360 					ift .SIZEOF(MAIN.ATARI) > 0
  1361 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1362 					eif
  1363
  1364 					ift .SIZEOF(MAIN.CRT) > 0
  1365 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1365 				CRT: $2041..$2054
  1366 					eif
  1367
  1368 					ift .SIZEOF(MAIN.GR4PP) > 0
  1369 					.print 'GR4PP: ',MAIN.GR4PP,'..',MAIN.GR4PP+.SIZEOF(MAIN.GR4PP)-1
  1369 				GR4PP: $2055..$222C
  1370 					eif
  1371
  1372 					.print 'CODE: ',CODEORIGIN,'..',*-1
  1372 				CODE: $2000..$2452
  1373
  1374 				; ------------------------------------------------------------
  1375
  1376 2453			DATAORIGIN
  1377 2453 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1378 246B 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $01 $05
  1379
  1380 = 0024			VARINITSIZE	= *-DATAORIGIN
  1381 = 0031			VARDATASIZE	= 49
  1382
  1383 = 2484			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1384
  1385 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1385 				DATA: $2453..$2484
  1386
  1387 02E0-02E1> 17 20			run START
  1388
  1389 				; ------------------------------------------------------------
  1390
  1391 				.macro	STATICDATA
  1392 				.endm
  1393
  1394 					end
